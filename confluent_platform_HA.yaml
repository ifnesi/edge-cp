---
#########
# KRaft #
#########
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: sainsburys-poc

spec:
  clusterID: SainsburysCPEdgePoC001
  replicas: 3
  oneReplicaPerNode: true
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 500m
        memory: 1024Mi

  # If CfK is installed with '--set licenseKey=<CFK license key>':
  #license:
    #globalLicense: true

  configOverrides:
    server:
      - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - confluent.authorizer.access.rule.providers=KRAFT_ACL
      - allow.everyone.if.no.acl.found=false

  authorization:
    type: simple
    superUsers:
      - User:kafka

  listeners:
    controller:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential

  tls:
    autoGeneratedCerts: true

  metricReporter:
    enabled: false

  telemetry:
    global: false

---
###################################
# Confluent Server (Kafka Broker) #
###################################
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: sainsburys-poc

spec:
  replicas: 3
  oneReplicaPerNode: true
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 750m
        memory: 2048Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true

  # If CfK is installed with '--set licenseKey=<CFK license key>':
  #license:
    #globalLicense: true

  authorization:
    type: simple
    superUsers:
      - User:kafka

  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: false
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
      clusterRef:
        name: kraftcontroller

  services:
    kafkaRest:
      tls:
        enabled: true
        directoryPathInContainer: /mnt/sslcerts/
        secretRef: ca-pair-sslcerts
        jksPassword:
          secretRef: ca-pair-sslcerts
      externalAccess:
       type: loadBalancer
       loadBalancer:
         domain: local.kafka.sainsburys-poc
         port: 8090
         sessionAffinity: ClientIP

  listeners:
    internal:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
    replication:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
    external:
      tls:
        enabled: true
        directoryPathInContainer: /mnt/sslcerts/
        secretRef: ca-pair-sslcerts
        jksPassword:
          secretRef: ca-pair-sslcerts
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: local.kafka.sainsburys-poc
          brokerPrefix: b
          #bootstrapPrefix: kafka

  tls:
    autoGeneratedCerts: true

  configOverrides:
    server:
      # General
      - log.message.format.version=3.7
      - confluent.balancer.enable=true
      
      # Allow ACLs
      - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - confluent.authorizer.access.rule.providers=KRAFT_ACL
      - allow.everyone.if.no.acl.found=false

      # Protocol mapping
      - sasl.enabled.mechanisms=PLAIN
      - inter.broker.listener.name=REPLICATION
      - listeners=EXTERNAL://:9092,REPLICATION://:9072,INTERNAL://:9071
      - advertised.listeners=EXTERNAL://local.kafka.sainsburys-poc:9092,INTERNAL://kafka-0.kafka.sainsburys-poc.svc.cluster.local:9071,REPLICATION://kafka-0.kafka.sainsburys-poc.svc.cluster.local:9072
      - advertised.listeners=EXTERNAL://local.kafka.sainsburys-poc:9092,INTERNAL://kafka-1.kafka.sainsburys-poc.svc.cluster.local:9071,REPLICATION://kafka-1.kafka.sainsburys-poc.svc.cluster.local:9072
      - advertised.listeners=EXTERNAL://local.kafka.sainsburys-poc:9092,INTERNAL://kafka-2.kafka.sainsburys-poc.svc.cluster.local:9071,REPLICATION://kafka-2.kafka.sainsburys-poc.svc.cluster.local:9072

    log4j:
      - log4j.rootLogger=INFO, stdout

---
#######################
# Kafka REST Admin V3 #
#######################
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: rest-v3
  namespace: sainsburys-poc
spec:
  kafkaClusterRef:
    name: kafka
    namespace: sainsburys-poc
  kafkaRest:
    kafkaClusterID: SainsburysCPEdgePoC001
    endpoint: https://kafka.confluent.svc.cluster.local:8090
    tls:
      directoryPathInContainer: /mnt/sslcerts/
      secretRef: ca-pair-sslcerts
      jksPassword:
        secretRef: ca-pair-sslcerts
    authentication:
      type: basic
      basic:
        secretRef: credential
        roles:
          - Administrators