# CRDs for a Highly-Available Confluent Platform Cluster
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: sainsburys
spec:
  replicas: 3
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 750m
        memory: 1024Mi

  license:
    globalLicense: true

  tls:
    autoGeneratedCerts: true

  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential

---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: sainsburys
spec:
  replicas: 3
  oneReplicaPerNode: true
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 750m
        memory: 1024Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true

  tls:
    autoGeneratedCerts: true

  metricReporter:
    enabled: false

  listeners:
    internal:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
    external:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: local.kafka.sainsburys

  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
      clusterRef:
        name: kraftcontroller

  configOverrides:
    server:
      - confluent.license.topic.replication.factor=3
      - confluent.metrics.reporter.topic.replicas=3
      - confluent.tier.metadata.replication.factor=3
      - confluent.metadata.topic.replication.factor=3
      - confluent.balancer.topic.replication.factor=3
      - confluent.security.event.logger.exporter.kafka.topic.replicas=3
      - confluent.cluster.link.metadata.topic.replication.factor=3
      - confluent.balancer.enable=true
      - confluent.metadata.server.kraft.controller.enabled=true
      - event.logger.exporter.kafka.topic.replicas=3
      - offsets.topic.replication.factor=3
      - num.partitions=3
      - transaction.state.log.min.isr=2
      - transaction.state.log.replication.factor=3
      - log.message.format.version=3.7
      - inter.broker.listener.name=BROKER
      - controller.listener.names=CONTROLLER
      - listeners=BROKER://:9092
      - advertised.listeners=BROKER://local.kafka.sainsburys:9092
      - listener.security.protocol.map=BROKER:SASL_SSL,CONTROLLER:SASL_PLAINTEXT
      - sasl.mechanism.inter.broker.protocol=PLAIN
      - sasl.enabled.mechanisms=PLAIN
      - listener.name.broker.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.broker.sasl.enabled.mechanisms=PLAIN
      - listener.name.broker.sasl.mechanism=PLAIN
      - listener.name.broker.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.broker.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.broker.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.broker.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.broker.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: krc-cfk
  namespace: sainsburys
spec:
  kafkaClusterRef:
    name: kafka
  kafkaRest:
    endpoint: http://kafka.sainsburys.svc.cluster.local:8090
    authentication:
      type: basic
      basic:
        secretRef: credential

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: sainsburys
spec:
  selector:
    app: kafka
  type: LoadBalancer
  ports:
    - name: broker
      protocol: TCP
      port: 9092
      targetPort: 9092