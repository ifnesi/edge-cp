# CRDs for a Highly-Available Confluent Platform Cluster
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: sainsburys-poc

spec:
  clusterID: SainsburysCPEdgePoC001
  replicas: 1
  oneReplicaPerNode: true
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 500m
        memory: 1024Mi

  #license:
    #globalLicense: true
    #secretRef: 

  authorization:
    type: simple
    superUsers:
      - User:kafka

  tls:
    autoGeneratedCerts: true

  listeners:
    controller:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential

  configOverrides:
    server:
      # Allow ACLs
      - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - allow.everyone.if.no.acl.found=false

---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: sainsburys-poc

spec:
  replicas: 1
  oneReplicaPerNode: true
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0

  podTemplate:
    resources:
      requests:
        cpu: 750m
        memory: 2048Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true

  authorization:
    type: simple
    superUsers:
      - User:kafka

  metricReporter:
    enabled: false

  tls:
    autoGeneratedCerts: true

  listeners:
    internal:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
    replication:
      tls:
        enabled: false
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
    external:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: local.kafka.sainsburys-poc

  dependencies:
    kRaftController:
      clusterRef:
        name: kraftcontroller
        namespace: sainsburys-poc
      controllerListener:
        tls:
          enabled: false
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
    #kafkaRest:
    #  tls:
    #    enabled: false
    #  authentication:
    #    type: plain
    #    jaasConfig:
    #      secretRef: credential

  #services:
  #  kafkaRest:
  #    tls:
  #      enabled: false
  #    externalAccess:
  #      type: loadBalancer
  #      loadBalancer:
  #        domain: local.kafka.sainsburys-poc
  #        port: 8090
      #authentication:
      #  type: basic
      #  basic:
      #    secretRef: credential
      #    roles:
      #      - Administrators

  configOverrides:
    server:
      - num.partitions=1
      - offsets.topic.replication.factor=1
      - transaction.state.log.replication.factor=1
      - confluent.metrics.reporter.topic.replicas=1
      - confluent.license.topic.replication.factor=1
      - event.logger.exporter.kafka.topic.replicas=1
      - confluent.tier.metadata.replication.factor=1
      - confluent.metadata.topic.replication.factor=1
      - confluent.balancer.topic.replication.factor=1
      - confluent.cluster.link.metadata.topic.replication.factor=1
      - confluent.security.event.logger.exporter.kafka.topic.replicas=1
      - transaction.state.log.min.isr=1
      - confluent.balancer.enable=true
      - confluent.metadata.server.kraft.controller.enabled=true
      - log.message.format.version=3.7
      - inter.broker.listener.name=REPLICATION
      - controller.listener.names=CONTROLLER
      - sasl.mechanism.inter.broker.protocol=PLAIN
      - sasl.enabled.mechanisms=PLAIN

      # Allow ACLs
      - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - allow.everyone.if.no.acl.found=false

      # Protocol mapping
      #- listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT,REPLICATION:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      - listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT,REPLICATION:SASL_PLAINTEXT,EXTERNAL:SASL_SSL
      - listeners=EXTERNAL://:9092,REPLICATION://:9072,INTERNAL://:9071
      - advertised.listeners=EXTERNAL://local.kafka.sainsburys-poc:9092,REPLICATION://localhost:9072,INTERNAL://localhost:9071

      # External Broker listener
      - listener.name.external.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.external.sasl.enabled.mechanisms=PLAIN
      - listener.name.external.sasl.mechanism=PLAIN
      - listener.name.external.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.external.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.external.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # Internal Broker listener
      - listener.name.internal.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.internal.sasl.enabled.mechanisms=PLAIN
      - listener.name.internal.sasl.mechanism=PLAIN
      #- listener.name.external.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      #- listener.name.external.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      #- listener.name.external.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      #- listener.name.external.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      #- listener.name.external.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # Replicator Broker listener
      - listener.name.replicator.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.replicator.sasl.enabled.mechanisms=PLAIN
      - listener.name.replicator.sasl.mechanism=PLAIN
      #- listener.name.external.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      #- listener.name.external.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      #- listener.name.external.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      #- listener.name.external.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      #- listener.name.external.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # Configure Embedded REST Proxy
      #- kafka.rest.enable=true
      #- kafka.rest.authentication.method=BASIC
      #- kafka.rest.authentication.realm=KafkaRest
      #- kafka.rest.authentication.roles=Administrators
      #- kafka.rest.client.security.protocol=SASL_PLAINTEXT
      #- kafka.rest.confluent.rest.auth.propagate.method=JETTY_AUTH
      #- kafka.rest.bootstrap.servers=REPLICATION://localhost:9072
      #- kafka.rest.client.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      #- confluent.http.server.listeners=http://0.0.0.0:8090
      #- kafka.rest.bootstrap.servers=INTERNAL://localhost:9071

    log4j:
      - log4j.rootLogger=INFO, stdout

---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: kafka-rest
  namespace: sainsburys-poc
spec:
  kafkaClusterRef:
    name: kafka
    namespace: sainsburys-poc
  kafkaRest:
    endpoint: http://kafka.sainsburys-poc.svc.cluster.local:8090
    kafkaClusterID: SainsburysCPEdgePoC001
    authentication:
      type: basic
      basic:
        secretRef: credential
        roles:
          - Administrators
