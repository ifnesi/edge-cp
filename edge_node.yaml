---
apiVersion: v1
kind: Secret
metadata:
  name: credential
type: Opaque
stringData:
  plain-users.json: |
    {
      "kafka_client": "kafka_client-secret",
      "testuser1": "testuser1-secret",
      "kafka": "kafka-secret"
    }

---
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kafka
  namespace: sainsburys
spec:
  dataVolumeCapacity: 100G
  image:
    application: docker.io/confluentinc/cp-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 1

  configOverrides:
    server:
      - node.id=1
      - broker.id=1
      - process.roles=controller,broker
      - inter.broker.listener.name=REPLICATION
      - controller.quorum.voters=1@localhost:9074
      - confluent.license.topic.replication.factor=1
      - confluent.metrics.reporter.topic.replicas=1
      - confluent.tier.metadata.replication.factor=1
      - confluent.metadata.topic.replication.factor=1
      - confluent.balancer.topic.replication.factor=1
      - confluent.security.event.logger.exporter.kafka.topic.replicas=1
      - confluent.cluster.link.metadata.topic.replication.factor=1
      - confluent.balancer.enable=false
      - event.logger.exporter.kafka.topic.replicas=1
      - offsets.topic.replication.factor=1
      - log.message.format.version=3.7
      # Re-use the controller listener properties constructed by CFK
      - listener.name.external.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.external.sasl.enabled.mechanisms=PLAIN
      - listener.name.external.sasl.mechanism=PLAIN
      - listener.name.external.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.external.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.external.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.replication.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.replication.sasl.enabled.mechanisms=PLAIN
      - listener.name.replication.sasl.mechanism=PLAIN
      - listener.name.replication.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.replication.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.replication.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.replication.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.replication.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      # SASL_PLAINTEXT because SSL would require fqdn for REPLICATION and CONTROLLER listeners. Could add localhost as SAN...
      # - listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,INTERNAL:PLAINTEXT,REPLICATION:SASL_PLAINTEXT,EXTERNAL:SASL_SSL
      - listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,REPLICATION:SASL_PLAINTEXT,EXTERNAL:SASL_SSL
      - listeners=EXTERNAL://:9092,REPLICATION://:9072,CONTROLLER://:9074
      # - listeners=EXTERNAL://:9092,INTERNAL://:9071,REPLICATION://:9072,CONTROLLER://:9074

    log4j:
      - log4j.rootLogger=INFO, stdout
  tls:
    autoGeneratedCerts: true

  authorization:
    type: simple
    superUsers:
    - User:kafka
  
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential

  podTemplate:
    resources:
      requests:
        cpu: 750m
        memory: 1024Mi

    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true

  metricReporter:
    enabled: false

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: sainsburys
spec:
  selector:
    app: kafka
  type: LoadBalancer
  ports:
    - name: broker
      protocol: TCP
      port: 9092
      targetPort: 9092