# CRDs for an Edge-CP KRaft+Confluent Server in Combined Mode
---
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kafka
  namespace: sainsburys
spec:
  dataVolumeCapacity: 10G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: docker.io/confluentinc/confluent-init-container:2.11.0
  replicas: 1

  configOverrides:
    server:
      - node.id=101
      - broker.id=101
      - broker.rack=rack1
      - process.roles=broker,controller
      - inter.broker.listener.name=REPLICATION
      - controller.listener.names=CONTROLLER
      - controller.quorum.voters=101@localhost:9074
      - confluent.license.topic.replication.factor=1
      - confluent.metrics.reporter.topic.replicas=1
      - confluent.tier.metadata.replication.factor=1
      - confluent.metadata.topic.replication.factor=1
      - confluent.balancer.topic.replication.factor=1
      - confluent.security.event.logger.exporter.kafka.topic.replicas=1
      - confluent.cluster.link.metadata.topic.replication.factor=1
      - confluent.balancer.enable=false
      - confluent.metadata.server.kraft.controller.enabled=true
      - event.logger.exporter.kafka.topic.replicas=1
      - offsets.topic.replication.factor=1
      - num.partitions=1
      - transaction.state.log.min.isr=1
      - transaction.state.log.replication.factor=1
      - log.message.format.version=3.7

      # Allow ACLs
      - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - allow.everyone.if.no.acl.found=false

      # KRaft listener
      - listener.name.controller.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.controller.sasl.enabled.mechanisms=PLAIN
      - listener.name.controller.sasl.mechanism=PLAIN
      - listener.name.controller.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.controller.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.controller.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.controller.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.controller.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # External Broker listener
      - listener.name.external.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.external.sasl.enabled.mechanisms=PLAIN
      - listener.name.external.sasl.mechanism=PLAIN
      - listener.name.external.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.external.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.external.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.external.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # Internal Broker listener
      - listener.name.replication.plain.sasl.jaas.config=io.confluent.kafka.server.plugins.auth.FileBasedLoginModule required username="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:username}" password="${file:/mnt/secrets/kafka-controller-listener-apikeys/plain.txt:password}" config_path="/mnt/secrets/kafka-controller-listener-apikeys/apikeys.json" refresh_ms="3000";
      - listener.name.replication.sasl.enabled.mechanisms=PLAIN
      - listener.name.replication.sasl.mechanism=PLAIN
      - listener.name.replication.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.replication.ssl.keystore.location=/mnt/sslcerts/keystore.jks
      - listener.name.replication.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - listener.name.replication.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - listener.name.replication.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}

      # Protocol mapping
      - listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,REPLICATION:SASL_PLAINTEXT,EXTERNAL:SASL_SSL      
      - listeners=EXTERNAL://:9092,REPLICATION://:9072,CONTROLLER://:9074
      - advertised.listeners=EXTERNAL://local.kafka.sainsburys:9092,REPLICATION://localhost:9072

    log4j:
      - log4j.rootLogger=INFO, stdout

  tls:
    autoGeneratedCerts: true

  authorization:
    type: simple
    superUsers:
      - User:kafka
  
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential

  podTemplate:
    resources:
      limits:
        cpu: 1000m
        memory: 4Gi
      requests:
        cpu: 750m
        memory: 2Gi

    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true

  metricReporter:
    enabled: false

---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: krc-cfk
  namespace: sainsburys
spec:
  kafkaClusterRef:
    name: kafka
  kafkaRest:
    endpoint: http://kafka-0.kafka.sainsburys.svc.cluster.local:8090
    authentication:
      type: basic
      basic:
        secretRef: credential

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: sainsburys
spec:
  selector:
    app: kafka
  type: LoadBalancer
  ports:
    - name: broker
      protocol: TCP
      port: 9092
      targetPort: 9092